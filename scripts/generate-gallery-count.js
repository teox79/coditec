#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

// Path to the gallery images folder (relative to repository root)
const galleryDir = path.resolve(__dirname, '..', 'public', 'assets', 'img', 'gallery');

function isImageFile(filename) {
  const ext = path.extname(filename).toLowerCase();
  return ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.bmp'].includes(ext);
}

function countFiles(dir) {
  try {
    const items = fs.readdirSync(dir, { withFileTypes: true });
    let count = 0;
    for (const it of items) {
      if (it.isFile() && isImageFile(it.name)) count++;
    }
    return count;
  } catch (err) {
    console.error('Error reading directory', dir, err && err.message ? err.message : err);
    return null;
  }
}

const count = countFiles(galleryDir);
if (count === null) {
  console.error('Failed to count gallery images. Aborting.');
  process.exit(1);
}

const outDir = path.resolve(__dirname, '..', 'src', 'data');
const outFile = path.join(outDir, 'galleryCount.ts');
const content = `// This file is auto-generated by scripts/generate-gallery-count.js
// Run: npm run generate:gallery-count
export const GALLERY_IMAGE_COUNT = ${count} as const;
`;

try {
  if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
  fs.writeFileSync(outFile, content, 'utf8');
  console.log(`Wrote ${outFile} with count=${count}`);
} catch (err) {
  console.error('Failed to write', outFile, err && err.message ? err.message : err);
  process.exit(2);
}

process.exit(0);
